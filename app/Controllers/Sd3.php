<?php
/**
 * Created by PhpStorm.
 * User: leexiaohui(oranzh.cc@gmail.com)
 * Date: 2018/7/3
 * Time: 10:56
 */

namespace app\Controllers;


use app\Exception\BlueFatalException;
use app\Exception\BlueWarningException;
use app\Models\service\MysqlService;
use Server\CoreBase\ChildProxy;
use Server\Components\Process\ProcessManager;
use app\Process\MyProcess;


class Sd3 extends BaseController
{
    private $mysqlService;
    public function __construct($proxy = ChildProxy::class)
    {
        parent::__construct($proxy);
    }

    public function initialization($controller_name, $method_name)
    {
        parent::initialization($controller_name, $method_name); // TODO: Change the autogenerated stub
        $this->redis = $this->loader->redis('redisPool');
        $this->db = $this->loader->mysql('mysqlPool',$this);
        $this->mysqlService = $this->loader->model(MysqlService::class,$this);
    }


    public function http_update()
    {
        $data = [
            'id' => 216,
            'user_name' => 'lixiaohui'
        ];
        $this->mysqlService->update($data);
        $this->end('update ok');
    }

    public function http_update2()
    {
        $this->mysqlService->update2();
        $this->end('update2 ok');
    }

    public function http_incr()
    {
        $id = $this->http_input->get('id');
        $this->mysqlService->incr($id);
        $this->end('ok');
    }

    public function http_in()
    {
        $id = [
            216,
            217,
        ];
        $res = $this->mysqlService->in($id);
        $this->end($res);
    }

    public function http_between()
    {
        $res = $this->mysqlService->between();
        $this->end($res);
    }

    public function http_all()
    {
        $res = $this->mysqlService->select();
        $this->end($res);
    }

    public function http_count()
    {
        $res = $this->mysqlService->count();
        $this->end($res);
    }

    public function http_delete()
    {
        $this->mysqlService->delete();
        $this->end('delete ok');
    }

    public function http_one()
    {
        $id = $this->http_input->get('id');
        $one = $this->mysqlService->selectOne($id);
        $this->end($one);
    }


    /**
     * 测试异常
     */
    public function http_error()
    {
        $this->end(123);
        $this->interrupt();
    }

    public function http_warn()
    {
        throw  new BlueWarningException('Warning Error');
    }

    public function http_fatal()
    {
        throw new BlueFatalException('fatal error');
    }



    /**
     * 测试process
     * 关注下游执行结果,用RPC
     * 不关注下午执行结果,用MQ,不用RPC
     */
    public function http_processRedis()
    {
        $res = ProcessManager::getInstance()->getRpcCall(MyProcess::class)->redis();
        $this->end($res);
	}
    public function http_processMysql()
    {
        $res = ProcessManager::getInstance()->getRpcCall(MyProcess::class)->mysql();
        $this->end($res);
    }

    public function http_processService()
    {
        $res = ProcessManager::getInstance()->getRpcCall(MyProcess::class)->service();
        $this->end($res);
    }

    public function http_transferParam()
    {
        $res = ProcessManager::getInstance()->getRpcCall(MyProcess::class)->transferParam('123123');
        $this->end($res);
    }

    /**
     * 进程RPC代理类,将会访问代理的public test方法
     */
    public function http_processProxy()
    {
        $res = ProcessManager::getInstance()->getRpcCall(MyProcess::class)->test();
        $this->end($res);
    }

    /**
     * 代理类可以添加@oneWay注解，包含这个注解的方法进行RPC的时候将会被当做oneway处理。
     * 注意不会有返回值，即使有返回值，也不会有；
     */
    public function http_oneway()
    {
        $res = ProcessManager::getInstance()->getRpcCall(MyProcess::class)->oneWay();
        $this->end($res);
    }


    //TODO 测试AMQP
}
